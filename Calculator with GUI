import tkinter as tk
from tkinter import messagebox, StringVar, BooleanVar, Radiobutton

def calculate_pallets_with_full_row_column_placement(length_ft, width_ft, obstructions, side1_orientation, side2_orientation):
    pallet_dimensions = {'length': 132, 'width': 148}  # Including required spacing
    forklift_space_inch = 35 * 12  # For forklift maneuverability

    # Convert yard dimensions to inches
    yard_dimensions = {'length': length_ft * 12, 'width': width_ft * 12}

    # Adjust yard dimensions if there are no obstructions for the first row or column
    if not obstructions[side1_orientation]:
        if side1_orientation in ['left', 'right']:
            yard_dimensions['width'] = yard_dimensions['width']
        else:
            yard_dimensions['length'] = yard_dimensions['length']

    if not obstructions[side2_orientation]:
        if side2_orientation in ['left', 'right']:
            yard_dimensions['width'] = yard_dimensions['width']
        else:
            yard_dimensions['length'] = yard_dimensions['length']

    # Determine the pallet orientation
    pallet_orientation_length, pallet_orientation_width = (
        pallet_dimensions['length'], pallet_dimensions['width']) if 'top' in [side1_orientation, side2_orientation] or 'bottom' in [side1_orientation, side2_orientation] else (
        pallet_dimensions['width'], pallet_dimensions['length'])

    # Calculate how many pallets can fit
    pallets_length = yard_dimensions['length'] // pallet_orientation_length
    pallets_width = yard_dimensions['width'] // pallet_orientation_width

    # Adjust for forklift maneuverability space
    extra_length_space = ((pallets_length - 1) // 2) * forklift_space_inch if pallets_length > 2 else 0
    extra_width_space = ((pallets_width - 1) // 2) * forklift_space_inch if pallets_width > 2 else 0

    adjusted_length = yard_dimensions['length'] - extra_length_space
    adjusted_width = yard_dimensions['width'] - extra_width_space

    # Final pallet count
    final_pallets_length = adjusted_length // pallet_orientation_length
    final_pallets_width = adjusted_width // pallet_orientation_width

    total_pallets = final_pallets_length * final_pallets_width

    return max(0, total_pallets), side1_orientation, side2_orientation

# GUI Function to trigger calculation
def trigger_calculation():
    length_ft = float(length_entry.get())
    width_ft = float(width_entry.get())
    obstructions = {
        'top': top_var.get(),
        'left': left_var.get(),
        'right': right_var.get(),
        'bottom': bottom_var.get(),
    }
    side1_orientation = side1_orientation_var.get()
    side2_orientation = side2_orientation_var.get()

    total_pallets, s1_orientation, s2_orientation = calculate_pallets_with_full_row_column_placement(
        length_ft, width_ft, obstructions, side1_orientation, side2_orientation
    )

    result_text = f"First pallet's short side will be at the {s1_orientation} and the wide side will be at the {s2_orientation}.\nTotal pallets that can fit: {total_pallets}"
    messagebox.showinfo("Calculation Result", result_text)

# Set up the main application window
root = tk.Tk()
root.title("Pallet Calculator")

# Entry for yard dimensions
tk.Label(root, text="Yard Length (ft):").pack()
length_entry = tk.Entry(root)
length_entry.pack()

tk.Label(root, text="Yard Width (ft):").pack()
width_entry = tk.Entry(root)
width_entry.pack()

# Checkboxes for obstructions
top_var = BooleanVar()
tk.Checkbutton(root, text="Obstruction at Top", variable=top_var).pack()
left_var = BooleanVar()
tk.Checkbutton(root, text="Obstruction at Left", variable=left_var).pack()
right_var = BooleanVar()
tk.Checkbutton(root, text="Obstruction at Right", variable=right_var).pack()
bottom_var = BooleanVar()
tk.Checkbutton(root, text="Obstruction at Bottom", variable=bottom_var).pack()

# Orientation selection
side1_orientation_var = StringVar()
side2_orientation_var = StringVar()

tk.Label(root, text="Short Side of the First Pallet Faces:").pack()
Radiobutton(root, text="Top", variable=side1_orientation_var, value='left').pack()
Radiobutton(root, text="Right", variable=side1_orientation_var, value='right').pack()
Radiobutton(root, text="Bottom", variable=side1_orientation_var, value='bottom').pack()

tk.Label(root, text="Wide Side of the First Pallet Faces:").pack()
Radiobutton(root, text="Top", variable=side2_orientation_var, value='top').pack()
Radiobutton(root, text="Left", variable=side2_orientation_var, value='left').pack()
Radiobutton(root, text="Right", variable=side2_orientation_var, value='right').pack()
Radiobutton(root, text="Bottom", variable=side2_orientation_var, value='bottom').pack()

# Calculate button
calculate_button = tk.Button(root, text="Calculate", command=trigger_calculation)
calculate_button.pack(pady=10)

# Start the GUI event loop
root.mainloop()
